{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["userAccessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","accessToken","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userID","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98ab312e.chunk.js","sourcesContent":["const clientId = '9292dc64213a4ed58151523d8f69a063';\r\nconst redirectUri = 'http://CGTones.github.io/Audioslate';\r\n\r\nlet userAccessToken;\r\n\r\nconst Spotify = {\r\n  // provides user access token for Spotify account\r\n  getAccessToken() {\r\n    // checks for presence of user access token\r\n    if (userAccessToken) {\r\n      return userAccessToken;\r\n    }\r\n\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n  \r\n    // if token and expiration time are present in the URL (line 21), \r\n      // sets the access token value (line 22)\r\n      // defines expiration time (line 23)\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      userAccessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      // clears access token and URL parameters, allowing user to obtain a new access token when current token expires\r\n      // also preventing the app from trying to re-obtain the current access token **after** it has expired\r\n      window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return userAccessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  // search method that accepts a search term input and returns a list of tracks is JSON format\r\n    // provides access to the user's access token which is required in order to make requests to the Spotify API (line 41)\r\n    // uses implicit grant flow request parameters to make requests (line 42)\r\n    // authorization header containing access token (lines 43-45)\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n      // after promise resolves, the response is converted to JSON (lines 47-48)\r\n    }).then(response => {\r\n      return response.json();\r\n      // after response is converted to JSON, performs a series of checks (using conditionals)\r\n    }).then(jsonResponse => {\r\n        // checks for the presence of tracks (line 53)\r\n          // if no tracks are present, returns an empty array (line 54)\r\n        if(!jsonResponse.tracks) {\r\n          return [];\r\n      }\r\n      // if tracks are present, maps the converted JSON to a mapped array containiing a list of track objects (lines 57-63)\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    })\r\n  },\r\n\r\n  // TODO ** convert savePlaylist() to async function **\r\n  // savePlaylist method that allows user to save a custom playlist to their spotify account (lines 69-92)\r\n  savePlaylist(name, trackUris) {\r\n    // checks for the presence of a playlist name and a track Uris array (line 72)\r\n      // returns nothing if not present (line 73)\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n    \r\n    // provides accesss to the user's access token (line 79)\r\n    // provides access to the authorization header containing the user's access token\r\n    // provides access to the user's ID once the GET request has been fulfilled\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userID;\r\n\r\n    // GET request to obtain the user's Spotify username using fetch(x, y) (line 88)\r\n    // after the request for the user's Spotify username has been fullfilled, \r\n    // converts the response to JSON (line 89)\r\n    // after the response has been converted to JSON (line 90)\r\n      // stores the jsonResponse.id parameter (or username) to the userID variable (line 91)\r\n    return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userID = jsonResponse.id;\r\n      \r\n      // POST request using returned userID from line 91 that creates a new playlist (line 94)\r\n        // additional settings (lines 96-99)\r\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, \r\n       {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ name: name })\r\n        \r\n        // after POST request to create a new playlist is fulfilled, converts response to JSON (line 102)\r\n        // after response is converted to JSON (line 103)\r\n          // stores the jsonResponse.id (or playlist name) to the playlistId variable (line 105)\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n\r\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistId}/tracks`, \r\n          {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({ uris: trackUris })\r\n        })\r\n      })\r\n    })\r\n  }\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: ''\r\n    }\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  handleTermChange(e) {\r\n    this.setState({ term: e.target.value });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className='SearchBar'>\r\n        <input placeholder='Enter A Song, Album, or Artist'\r\n               onChange={this.handleTermChange}\r\n        />\r\n        <button className='SearchButton' onClick={this.search}>SEARCH</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <button className='Track-action' onClick={this.removeTrack}>-</button>;\r\n     } else {\r\n       return <button className='Track-action' onClick={this.addTrack}>+</button>;\r\n     } \r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className='Track'>\r\n        <div className='Track-information'>\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './Tracklist.css';\r\n\r\nimport Track from '../Track/Track';\r\n\r\nclass Tracklist extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='TrackList'>\r\n        {\r\n          this.props.tracks.map((track) => {\r\n            return ( <Track \r\n                          track={track} \r\n                          key={track.id}\r\n                          onAdd={this.props.onAdd}\r\n                          onRemove={this.props.onRemove}\r\n                          isRemoval={this.props.isRemoval} \r\n                   />)\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Tracklist;","import React from 'react';\r\nimport './SearchResults.css';\r\n\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='SearchResults'>\r\n        <h2>Search Results</h2>\r\n        <Tracklist tracks={this.props.searchResults} \r\n                   onAdd={this.props.onAdd} \r\n                   isRemoval={false} \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\n\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n  \r\nhandleNameChange(e) {\r\n  this.props.onNameChange(e.target.value);\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className='Playlist'>\r\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\r\n        <Tracklist \r\n          tracks={this.props.playlistTracks}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true}\r\n        />\r\n        <button className='Playlist-save' onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"playlist-one\",\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  \n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults})\n    });\n  }\n  \n  render() {\n    return (\n      <div>  \n        <h1>AUDIO 🎧 SLATE</h1>\n        <div className='App'>\n          <SearchBar \n            onSearch={this.search}\n          />\n          <div className='App-playlist'>\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}